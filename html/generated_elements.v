// This file is autogenerated by gen_elements.py
module html

import arrays

@[inline] pub fn p(text ElementArg, params ElementParams) HtmlElement {
	return elm('p', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn h1(text ElementArg, params ElementParams) HtmlElement {
	return elm('h1', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn h2(text ElementArg, params ElementParams) HtmlElement {
	return elm('h2', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn h3(text ElementArg, params ElementParams) HtmlElement {
	return elm('h3', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn h4(text ElementArg, params ElementParams) HtmlElement {
	return elm('h4', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn h5(text ElementArg, params ElementParams) HtmlElement {
	return elm('h5', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn h6(text ElementArg, params ElementParams) HtmlElement {
	return elm('h6', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn span(text ElementArg, params ElementParams) HtmlElement {
	return elm('span', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn b(text ElementArg, params ElementParams) HtmlElement {
	return elm('b', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn strong(text ElementArg, params ElementParams) HtmlElement {
	return elm('strong', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn i(text ElementArg, params ElementParams) HtmlElement {
	return elm('i', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn em(text ElementArg, params ElementParams) HtmlElement {
	return elm('em', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn title(text ElementArg, params ElementParams) HtmlElement {
	return elm('title', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn li(text ElementArg, params ElementParams) HtmlElement {
	return elm('li', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn code(text ElementArg, params ElementParams) HtmlElement {
	return elm('code', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn summary(text ElementArg, params ElementParams) HtmlElement {
	return elm('summary', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn th(text ElementArg, params ElementParams) HtmlElement {
	return elm('th', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn td(text ElementArg, params ElementParams) HtmlElement {
	return elm('td', ElementParams{
		...params,
		children: match text {
			HtmlElement { arrays.concat(params.children, text) }
			string { arrays.concat(params.children, text) }
			[]HtmlElementOrString { arrays.append(params.children, text) }
		}
	})
}

@[inline] pub fn html(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('html', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn head(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('head', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn body(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('body', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn footer(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('footer', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn div(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('div', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn nav(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('nav', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn ul(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('ul', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn ol(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('ol', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn pre(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('pre', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn details(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('details', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn table(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('table', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn tr(children []HtmlElementOrString, params ElementParams) HtmlElement {
	return elm('tr', ElementParams{
		...params,
		children: arrays.append(children, params.children)
	})
}

@[inline] pub fn hr(params ElementParams) HtmlElement {
	return elm('hr', ElementParams{
		...params,
		is_self_closing: true
	})
}

@[inline] pub fn br(params ElementParams) HtmlElement {
	return elm('br', ElementParams{
		...params,
		is_self_closing: true
	})
}

